---@alias Techmino.Player.Type 'brik'|'gela'|'acry'
---@alias Techmino.EndReason
---|'AC'  Win (Accepted)
---|'WA'  Block out (Wrong Answer)
---|'CE'  Lock out (Compile Error)
---|'MLE' Top out (Memory Limit Exceeded)
---|'TLE' Time out (Time Limit Exceeded)
---|'OLE' Finesse fault (Output Limit Exceeded)
---|'ILE' Ran out pieces (Idleness Limit Exceeded)
---|'PE'  Mission failed (Presentation Error)
---|'UKE' Other reason (Unknown Error)

---@alias Techmino.EventName
---| 'beforePress'     -- General(act)
---| 'afterPress'      -- General(act)
---| 'beforeRelease'   -- General(act)
---| 'afterRelease'    -- General(act)
---| 'playerInit'      -- General
---| 'gameStart'       -- General
---| 'gameOver'        -- General(reason)
---| 'always'          -- General
---|
---| 'afterResetPos'   -- Brik, Gela
---| 'afterSpawn'      -- Brik, Gela
---| 'afterDrop'       -- Brik, Gela
---| 'afterLock'       -- Brik, Gela
---| 'afterClear'      -- Brik(his), Gela
---| 'beforeCancel'    -- Brik(atk), Gela(atk)
---| 'beforeSend'      -- Brik(atk), Gela(atk)
---| 'beforeDiscard'   -- Brik, Gela
---| 'drawBelowField'  -- Brik, Gela, Acry
---| 'drawBelowBlock'  -- Brik, Gela, Acry
---| 'drawBelowMarks'  -- Brik,       Acry
---| 'drawInField'     -- Brik, Gela, Acry
---| 'drawOnPlayer'    -- Brik, Gela, Acry
---|
---| 'whenSuffocate'   -- Brik, Gela
---| 'changeSpawnPos'  -- Brik
---| 'extraSolidCheck' -- Brik
---|
---| 'legalMove'       -- Acry(mode)
---| 'illegalMove'     -- Acry(mode)

---@class Techmino.ParticleSystems
---@field rectShade love.ParticleSystem
---@field rectTilt love.ParticleSystem
---@field rectScale love.ParticleSystem
---@field spinArrow table
---@field star love.ParticleSystem
---@field boardSmoke love.ParticleSystem
---@field line love.ParticleSystem
---@field hitSparkle love.ParticleSystem
---@field cornerCheck love.ParticleSystem
---@field trail love.ParticleSystem
---@field exMapBack love.ParticleSystem

---@alias Techmino.Event string | {[1]:number, [2]:fun(P:Techmino.Player):...} | fun(P:Techmino.Player):...
---@alias Techmino.Event.Brik string | {[1]:number, [2]:fun(P:Techmino.Player.Brik):...} | fun(P:Techmino.Player.Brik):...
---@alias Techmino.Event.Gela string | {[1]:number, [2]:fun(P:Techmino.Player.Gela):...} | fun(P:Techmino.Player.Gela):...
---@alias Techmino.Event.Acry string | {[1]:number, [2]:fun(P:Techmino.Player.Acry):...} | fun(P:Techmino.Player.Acry):...

---@class Techmino.Cell
---@field cid string cell's mem pointer string
---@field id number ascending piece number
---@field color number 0~63
---@field alpha? number 0~1
---@field conn table<string, any>
---@field bias {expBack?:number, lineBack?:number, teleBack?:number, x:number, y:number}
---@field visTimer? number
---@field fadeTime? number
---@field visStep? number
---@field visMax? number
---
---@field diggable boolean Gela only
---@field connClear boolean Gela only

---@alias Techmino.RectPiece Mat<Techmino.Cell|false>

---@class Techmino.Hand
---@field id number
---@field shape number
---@field direction number
---@field name string
---@field matrix Techmino.RectPiece
---@field _origin Techmino.Hand
---
---@field size number Gela only

---@class Techmino.Mode
---@field initialize function Called when initializing the mode
---@field settings {brik:Techmino.Mode.Setting.Brik?, gela:Techmino.Mode.Setting.Gela?, acry:Techmino.Mode.Setting.Acry?}
---@field layout 'default' Layout mode
---@field checkFinish function Return if the game should end when a player finishes
---@field result function Called when the game ends
---@field resultPage fun(time:number) Drawing the result page
---@field name string Mode name, for debug use

---@class Techmino.Player
---@field gameMode Techmino.Player.Type
---@field id number limited to 1~1000
---@field team number Team ID, 0 as No Team
---@field isMain boolean
---@field sound boolean
---@field settings Techmino.Mode.Setting.Brik|Techmino.Mode.Setting.Gela|Techmino.Mode.Setting.Acry
---@field buffedKey table
---@field modeData Techmino.PlayerModeData
---@field soundTimeHistory table
---@field RND love.RandomGenerator
---@field pos {x:number, y:number, k:number, a:number, dx:number, dy:number, dk:number, da:number, vx:number, vy:number, vk:number, va:number}
---@field finished Techmino.EndReason|boolean Did game finish
---@field realTime number Real time, [float] s
---@field time number Inside timer for player, [int] ms
---@field gameTime number Game time of player, [int] ms
---@field timing boolean Is gameTime running?
---@field texts Zenitha.Text
---@field particles Techmino.ParticleSystems
---
---@field updateFrame function
---@field scriptCmd function
---@field decodeScript function
---@field checkScriptSyntax function
---
---@field hand Techmino.Hand|false Current controlling piece object
---@field handX number
---@field handY number
---@field event table<string, Techmino.Event[]>
---@field soundEvent table
---@field _actions table<string, {press:fun(P:Techmino.Player), release:fun(P:Techmino.Player)}>
---
---@field receive function
---@field render function

---@class Techmino.PlayerModeData
---@field subMode string
---@field stat Techmino.Mech.Basic.StatisticTable
---@field music Techmino.PlayerModeData.MusicTable
---@field target {[any]:any}
---@field [any] any

---@class Techmino.PlayerModeData.MusicTable
---@field id? string FMOD parameter name, default to 'intensity'
---@field path string Lerping value path, like 'modeData.stat.line' or '.stat.line' in short
---@field s? number Lerping start point, leave this empty to use direct value instead of 0~1 lerping
---@field e? number Lerping end point
